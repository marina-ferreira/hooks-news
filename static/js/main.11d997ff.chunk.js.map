{"version":3,"sources":["components/loading/loading.styles.jsx","components/loading/loading.jsx","components/error-message/error-message.styles.jsx","components/error-message/error-message.jsx","App.styles.jsx","App.js","serviceWorker.js","index.js"],"names":["LoadingAnimation","keyframes","LoadingWrapper","styled","div","Circle","angle","delay","Loading","ErrorWrapper","ErrorImage","img","Message","ErrorMessage","message","src","alt","style","marginTop","error","GlobalStyle","createGlobalStyle","Form","form","Logo","Input","input","Button","props","light","List","ul","ListItem","li","ListLink","a","ArticleList","memo","results","map","result","url","key","objectID","href","title","App","useState","setResults","query","setQuery","loading","setLoading","setError","inputSearchRef","useRef","getResults","axios","get","response","data","hits","current","focus","cbGetResults","useCallback","useEffect","onSubmit","e","preventDefault","type","onChange","target","value","ref","autoFocus","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11d997ff.chunk.js","sourcesContent":["import styled, { keyframes } from 'styled-components';\n\nconst LoadingAnimation = keyframes`\n  0%, 80%, 100% { transform: scale(0); }\n  40% { transform: scale(1); }\n`;\n\nconst LoadingWrapper = styled.div`\n  margin: auto;\n  width: 40px;\n  height: 40px;\n  position: relative;\n  top: 50%;\n  transform: translateY(-50%);\n`;\n\nconst Circle = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  transform: rotate(${({ angle }) => `${angle}deg`});\n\n  &::before {\n    content: '';\n    display: block;\n    margin: 0 auto;\n    width: 15%;\n    height: 15%;\n    background-color: #fff;\n    border-radius: 100%;\n    animation: ${LoadingAnimation} 1.2s infinite ease-in-out both;\n    animation-delay: ${({ delay }) => `${delay}s`};\n  }\n`;\n\nexport { LoadingWrapper, Circle }\n","import React from 'react';\nimport { LoadingWrapper, Circle } from './loading.styles';\n\nconst Loading = () => (\n  <LoadingWrapper>\n    <Circle angle={0} delay={0} />\n    <Circle angle={360} delay={-1.1} />\n    <Circle angle={60} delay={-1} />\n    <Circle angle={90} delay={-0.9} />\n    <Circle angle={120} delay={-0.8} />\n    <Circle angle={150} delay={-0.7} />\n    <Circle angle={180} delay={-0.6} />\n    <Circle angle={210} delay={-0.5} />\n    <Circle angle={240} delay={-0.4} />\n    <Circle angle={270} delay={-0.3} />\n    <Circle angle={300} delay={-0.2} />\n    <Circle angle={330} delay={-0.1} />\n  </LoadingWrapper>\n)\n\nexport default Loading;\n","import styled from 'styled-components';\n\nconst ErrorWrapper = styled.div`\n  height: 90%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ErrorImage = styled.img`\n  width: 50%;\n`;\n\nconst Message = styled.div`\n  color: #999EFF;\n  font-size: 30px;\n  text-align: center;\n  margin-top: 60px;\n`;\n\nexport { ErrorWrapper, ErrorImage, Message }\n","import React from 'react';\nimport { ErrorWrapper, ErrorImage, Message } from './error-message.styles';\n\nconst ErrorMessage = (message) => (\n  <ErrorWrapper>\n    <ErrorImage src='https://i.imgur.com/A040Lxr.png/360' alt=\"Error image\" />\n    <Message>\n      Sorry, something went wrong...\n      <div style={{ marginTop: 20 }}><em>{message.error}.</em></div>\n    </Message>\n  </ErrorWrapper>\n)\n\nexport default ErrorMessage;\n","import styled, { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Montserrat&display=swap');\n\n  * {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    height: 100vh;\n    padding: 30px;\n    display: flex;\n    background: #1D1C40;\n    font-family: 'Montserrat', sans-serif;\n  }\n\n  #root {\n    width: 50vw;\n    margin: 0 auto;\n  }\n`\n\nconst Form = styled.form`\n  position: relative;\n  text-align: center;\n`;\n\nconst Logo = styled.img`\n  text-align: left;\n  position: absolute;\n  left: 0%;\n  top: 50%;\n  transform: translateY(-50%);\n`;\n\nconst Input = styled.input`\n  padding: 10px;\n  margin-right: 10px;\n  border-radius: 5px;\n  border: none;\n  font-size: 16px;\n  outline: 2px solid rgba(0, 0, 0, 0);\n  transition: outline .2s ease;\n  background: #ccc;\n\n  &:focus {\n    outline: 2px solid #F29F05;\n  }\n`;\n\nconst Button = styled.input`\n  min-width: 100px;\n  padding: 10px;\n  margin-right: 5px;\n  font-size: 16px;\n  border-radius: 5px;\n  border: none;\n  background: ${props => props.light ? '#F4BA4E' : '#F29F05'};\n`;\n\nconst List = styled.ul`\n  list-style: none;\n  margin-top: 40px;\n  box-shadow: 2px 2px rgba(0, 0, 0, .2);\n  border-radius: 10px;\n`;\n\nconst ListItem = styled.li`\n  margin: 2px 0;\n  border-radius: 5px;\n  transition: background .2s ease;\n  background: rgba(0, 0, 0, 0);\n\n  &:nth-child(odd) {\n    background: #8086FF30;\n  }\n\n  &:nth-child(even) {\n    background: #999EFF50;\n  }\n\n  &:hover {\n    background: #6C72D9;\n  }\n`;\n\nconst ListLink = styled.a`\n  padding: 15px;\n  display: block;\n  color: #fff;\n  text-decoration: none;\n  border-radius: 5px;\n`;\n\nexport { GlobalStyle, Form, Logo, Input, Button, List, ListItem, ListLink }\n","import React, { useState, useEffect, useCallback, useRef, memo } from 'react';\nimport axios from 'axios';\nimport Loading from './components/loading/loading';\nimport ErrorMessage from './components/error-message/error-message';\n\nimport {\n  GlobalStyle,\n  Input,\n  Button,\n  List,\n  ListItem,\n  ListLink,\n  Form,\n  Logo\n} from './App.styles';\n\nfunction App() {\n  const [results, setResults] = useState([]);\n  const [query, setQuery] = useState('react hooks');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const inputSearchRef = useRef();\n\n  const getResults = async () => {\n    setLoading(true);\n    try {\n      const url = `http://hn.algolia.com/api/v1/search?query=${query}`;\n      const response = await axios.get(url);\n\n      setResults(response.data.hits);\n      inputSearchRef.current.focus();\n    } catch(error) {\n      setError(error);\n    }\n\n    setLoading(false);\n  }\n\n  const cbGetResults = useCallback(getResults, []);\n\n  useEffect(() => {\n    cbGetResults();\n  }, [cbGetResults]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    getResults();\n  }\n\n  const handleClear = () => {\n    setQuery('');\n    inputSearchRef.current.focus();\n  }\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Logo src='https://icon.now.sh/react/48/00d8ff' alt='React Logo' />\n        <Input\n          type='text'\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          ref={inputSearchRef}\n          autoFocus\n        />\n\n        <Button type='submit' value='Search' />\n        <Button light type='button' value='Clear' onClick={handleClear} />\n      </Form>\n\n      {loading ? (\n        <Loading />\n      ) : (\n        <ArticleList results={results} />\n      )}\n\n      {error && <ErrorMessage error={error.message} /> }\n      <GlobalStyle />\n    </>\n  );\n}\n\nconst ArticleList = memo(({ results }) => (\n  <List>\n    {results.map(result => (\n      result.url && <ListItem key={result.objectID}>\n        <ListLink href={result.url}>{result.title}</ListLink>\n      </ListItem>\n    ))}\n  </List>\n))\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}